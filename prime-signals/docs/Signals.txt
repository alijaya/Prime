= Signals =
:toc:

== Features
- crossplatform event-system (cpp, flash, js, neko)
- lightweight
- fast
- easily readable
- easy to use
- haXe autocompletion friendly
- typed binding
- typed listening

A well known, somewhat similar AS3 project: https://github.com/robertpenner/as3-signals[as3-signals]


== Introduction
=== What is a Signal?
A Signal tells all connected listeners about an event. It is usually only one "story" and listeners know what they can expect.
It is comparable to an event dispatcher in other systems. Signals are fully typed, supported by autocompletion in IDEs and provides more management features than most other systems. It adds very little overhead compared to regular function calls and is alot faster than http://stackoverflow.com/questions/2349378/new-programming-jargon-you-coined/2444303#2444303["stringly-typed"] event systems.

TODO: Performance benchmarks.

=== What is the difference between a Signal and an Event?
An event as defined in physics is: a single occurrence of a process, e.g., the ionization of one atom.
In PrimeVC our definition is very similar. An event happens once and only once. The accompanying signal sends the details of this event.

=== Whats wrong with js/flash eventsystem?
TODO: Write a nice story here.

- Inefficient (code and performance wise) unbinding of multiple events
- No autocompletion or typechecking: any object instance could potentionally dispatch any event.
- Messages required to be wrapped in Event class instances. Handlers required to accept Event instances. Prevents reuse of generic functions as event handlers.


== Classes
=== http://prime.vc/api/types/primevc/core/dispatcher/Signal.html[Signal]
One of the advantages of prime-signals is having multiple typed event-parameters. To accomplish multiple signal-parameters there are 5 signal-objects:

- http://prime.vc/api/types/primevc/core/dispatcher/Signal0.html[+Signal0+]
- http://prime.vc/api/types/primevc/core/dispatcher/Signal1.html[+Signal1<Type1>+]
- http://prime.vc/api/types/primevc/core/dispatcher/Signal2.html[+Signal2<Type1, Type2>+]
- http://prime.vc/api/types/primevc/core/dispatcher/Signal3.html[+Signal3<Type1, Type2, Type3>+]
- http://prime.vc/api/types/primevc/core/dispatcher/Signal4.html[+Signal4<Type1, Type2, Type3, Type4>+]

~It's possible to add more parameters by creating bigger signals but in our experience we've never needed more than 4 parameters.~


=== http://prime.vc/api/types/primevc/core/dispatcher/Wire.html[Wire]
The signal will create and return a small wire-object every time an handler is bound to it. This wire is the direct binding between the signal and the handler and can be used to temporary disable/enable (connect/disconnect) the binding or to dispose (permanently disconnect/destroy) the binding.
[source,haxe]
---------
var wire = signal.bind( this, handler );
wire.disable();
---------

Storing a reference of the wire is only required in the following cases:

- you want to be able to temporarily enable/disable the wire ** example **
- you don't or can't have a reference to the origin signal when you want to stop listening ** example **
- if you want to dynamicly change the handler method ** example **


=== http://prime.vc/api/types/primevc/core/dispatcher/Signals.html[Signal-groups]
TODO: Write a nice story here.

- Provides grouping of related events.


=== Conventions
- define signals as singular, present-tence, nouns
- define handlers as a verb


== Usage
=== Listening
After binding a handler to a signal, the handler will be called every time the signal is dispatched. The handler must accept all parameters defined for the signal. The bind method of a signal needs two parameters, the object owning the signal and the handler which will be called.
[source,haxe]
---------
var signal : Signal2<Int, String>;                  // signal definition
function actOnSginal (p1:Int, p2:String) : Void;    // handler definition
signal.bind( this, actOnSginal );                   // binding them together
---------

A handler can also listen to one signal dispatch instead of being called every time the signal dispatches.
[source, haxe]
signal.bindOnce( this, actOnSignal );


=== Observing
Apart from listening to, a signal can also be observed. This comes in handy when a signal has parameters the observer doesn't care about and it just wants to know when the signal is dispatching.

For example, a button that gets selected on a mouse-click won't care about the exact details of the click. The select method can be a general function and doesn't have to accept any parameters.
[source,haxe]
    mouse.click.observe( btn, btn.select ); // in btn's class: function select() { ... }

Or if the handler wants to observe the signal once:
[source,haxe]
    mouse.click.observeOnce( btn, btn.select );


=== Stop listening
Sometimes there's just no signal and too much noise. You need a break. We understand.
There are multiple ways to stop listening to a signal:

- using the returned wire-reference and disposing it (+wire.dispose+)
- calling +signal.unbind( owner, handler );+
+
This will only unbind this specific handler from the owner

- calling +signal.unbind( owner );+
+
This will unbind all handlers of owner which are bound to this signal.

- calling +signal.unbindAll();+
+
This will unbind all handlers of the signal


=== Syntax sugar
By using a small utility `prime.utils.Bind` it's possible to bind to signals in a more natural and readble way.
These are all inline, dead-code-eliminatable functions and add zero overhead over regular binding.

[source,haxe]
-------
using prime.utils.Bind;

handlerFunction.on(signal, owner);     // signal.bind(this, handlerFunction);
observeFunction.on(signal, owner);     // signal.observe(this, observeFunction);
oneTimeFunction.onceOn(signal, owner); // signal.bindOnce(this, oneTimeFunction);
function(){}.onceOn(signal, owner);    // signal.observeOnce(this, function(){});


// Example:
doSomething.onceOn(textField.change, this);
function doSomething (with:String) : Void;
-------

This utility also provides convenience methods to wire 2 signals together:

[source,haxe]
-------
var signal          : Signal2<String,Int>;
var resendingSignal : Signal2<String,Int>;

// Bind a Signal to another Signal's send() method.
resendingSignal.on(signal);        // Owner defaults to the resendingSignal
resendingSignal.on(signal, owner); // Specific owner

// Signal types must match exactly:
var compileErrorSig : Signal2<Int,String>;
compileErrorSig.on(signal); // <-- Does not compile

// However, you can trigger a Signal0 from any other Signal0-4
var observingSignal : Signal0;
observingSignal.on(signal); // <-- Compiles!
-------


== Native wrappers

The Prime display package provides a cross-platform AS3 like display-list API which use Signals for event handling.
You can also easily wrap native Flash and Javascript events yourself.

See:

- http://prime.vc/api/packages/primevc/gui/events/package.html[prime.gui.events package]
- http://prime.vc/api/types/primevc/gui/events/DisplaySignals.html[DisplayEvents API]
- http://prime.vc/api/types/primevc/gui/events/KeyboardSignals.html[KeyboardEvents API]
- http://prime.vc/api/types/primevc/gui/events/MouseSignals.html[MouseEvents API]
- http://prime.vc/api/types/primevc/gui/events/TextSignals.html[TextEvents API]

[source,haxe]
-------
 import prime.gui.events.DisplayEvents;
 import prime.gui.events.MouseEvents;

var keyboardEvents = new prime.gui.events.KeyboardEvents(sprite or dom-element);
var mouseEvents    = new prime.gui.events.MouseEvents(sprite or dom-element);
// etc...

mouseEvents.down.bind() // Is triggered in Flash by a MOUSE_DOWN event
-------

For an example how to wrap other native events yourself (patches are welcome), take a look at https://github.com/touch/PrimeVC/blob/master/src/primevc/avm2/events/FlashSignal0.hx[FlashSignal0], https://github.com/touch/PrimeVC/blob/master/src/primevc/avm2/events/KeyboardSignal.hx[KeyboardSignal] and implement http://prime.vc/api/types/primevc/core/dispatcher/IWireWatcher.html[IWireWatcher].


== Signal usage examples

The following example code demonstrates the power of regular functions as signal handlers.

[source,haxe]
-------
using prime.utils.Bind; // Provides: .on(...)
-------

=== Painless drag-n-drop flow handling

[source,haxe]
-------
function drag (state) {
	object.x = state.x;
	object.y = state.y;
}

// 2nd parameter to on() is the handler 'owner'.
var fingerDragging = drag.on(touch.move, this);
fingerDragging .enable.on(touch.press, this);
fingerDragging.disable.on(touch.release, this);
-------

=== Observing events

[source,haxe]
-------
function(){ trace("Smudges will appear on touch screen!"); }
	.on(touch.press, this);
-------

=== Doing things once

[source,haxe]
-------
initialize.onceOn(events.addedToStage, this);
-------

=== Recording events

[source,haxe]
-------
class Tweet { var sender : String; var message : String; }

// Imagine a twitter client that sends each new tweet through a Signal
var recording = new List<Tweet>();
var recorder  = recording.add.on(twitter.tweet);

recorder.disable(); // Don't record the next tweets.
recorder.enable();  // Resume recording.

// Make sure the recorder Wire gets disposed when logging out.
recorder.dispose.on(logoutButton.click, this);
-------

=== Type-safe changing of a Wire handler

[source,haxe]
-------
recorder.handler = function(tweet : Tweet) {
	trace("Recording: " + tweet);
	recording.add(tweet);
}
-------

=== Replaying events

[source,haxe]
-------
for (tweet in recording) twitter.tweet.send(tweet);
-------

=== Filtering events

[source,haxe]
-------
var optimusPrime : Signal1<String>;
function(tweet) if (tweet.sender == "Optimus Prime") {
    optimusPrime.send(tweet.message);
}.on(twitter.tweet);

alert.on(optimusPrime); // Prime says important things.
optimusPrime.enabled = false; // Unfortunately, nobody listening will hear.
-------

=== Wiring signals together

[source,haxe]
-------
applicationShutdown.on(exitButton.click, this); // 'this' is the owner.
applicationShutdown.on(exitButton.click); // applicationShutdown is the owner.
callback(alert, "Goodbye, world!").onceOn(applicationShutdown);

// Remove the "Goodbye, World!" callback
// (and other handlers owned by applicationShutdown)
applicationShutdown.unbind(exitButton);
-------

=== Various ways to clean up

[source,haxe]
-------
// Unbind all handlers (press,move,release) inside the touch signals group:
touch.unbindAll.on(applicationShutdown);

// Unbind all of this' handlers for optimusPrime:
optimusPrime.unbind(this);

// Removing just 1 handler:
fingerDragging.dispose();
touch.move.unbind(this, drag); // Same effect as fingerDragging.dispose();
-------
