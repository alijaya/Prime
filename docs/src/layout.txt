= Layout =
Ruben Weijers
:toc:


== Implementation

Every `UIElement` has a property `layout`, typed as `LayoutClient`. A `LayoutClient` is the basic layout-class that defines the position, size, margin and padding of it's `UIElement`.

=== LayoutClient
{sys:build/doc-include "diagrams/LayoutClient.ditaa"}


=== AdvancedLayoutClient
{sys:build/doc-include "diagrams/AdvancedLayoutClient.ditaa"}


=== LayoutContainer
{sys:build/doc-include "diagrams/LayoutContainer.ditaa"}

[horizontal]
`A`:: scrollPos(x, y)
`b-d`:: layoutContainer.children


== Box Model

PrimeVC implements a layout-model comparibable to the http://www.w3.org/TR/css3-ui/#box-sizing[css3 box-sizing] value `border-box`. The original css-box-model can be quite frustrating when you work with liquid layouts so we tried to fix it by only implementing the `border-box` model.

NOTE: Prime-developers: `border-box` is supported by all modern browsers. PrimeVC should be able to apply some automatic quirkcs for the html-implementation with support for IE6/7.

{sys:build/doc-include "diagrams/box-model.ditaa"}


== Examples

=== Build instructions
Below you find the commands to build the first four layout-tests. Make sure you execute these commands from the PrimeVC-root-folder.

Example1:
[source,bash]
----
> haxe build/build-flash-example.hxml \
	-main examples.layout.LayoutExample1 \
	-swf bin-debug/LayoutExample1.swf \
	--no-traces \
&& open bin-debug/LayoutExample1.swf
----

Example2:
[source,bash]
----
> haxe build/build-flash-example.hxml \
	-main examples.layout.LayoutExample2 \
	-swf bin-debug/LayoutExample2.swf \
	--no-traces \
&& open bin-debug/LayoutExample2.swf
----

Example3:
[source,bash]
----
> haxe build/build-flash-example.hxml \
	-main examples.layout.LayoutExample3 \
	-swf bin-debug/LayoutExample3.swf \
	--no-traces \
&& open bin-debug/LayoutExample3.swf
----

Example4:
[source,bash]
----
> build/build -m examples.layout.LayoutExample4 \
	-s layoutExample4 \
	-o LayoutExample4.swf -cp .
----
